/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.labimo.model.impl;

import com.labimo.model.Activation;
import com.labimo.model.ActivationModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Activation service. Represents a row in the &quot;labimo_Activation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.labimo.model.ActivationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ActivationImpl}.
 * </p>
 *
 * @author wzgong
 * @see ActivationImpl
 * @see com.labimo.model.Activation
 * @see com.labimo.model.ActivationModel
 * @generated
 */
public class ActivationModelImpl extends BaseModelImpl<Activation>
	implements ActivationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a activation model instance should use the {@link com.labimo.model.Activation} interface instead.
	 */
	public static final String TABLE_NAME = "labimo_Activation";
	public static final Object[][] TABLE_COLUMNS = {
			{ "activationId", Types.VARCHAR },
			{ "hardwareUuid", Types.VARCHAR },
			{ "licenseUuid", Types.VARCHAR },
			{ "createTime", Types.TIMESTAMP },
			{ "valid", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table labimo_Activation (activationId VARCHAR(75) not null primary key,hardwareUuid VARCHAR(75) null,licenseUuid VARCHAR(75) null,createTime DATE null,valid BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table labimo_Activation";
	public static final String ORDER_BY_JPQL = " ORDER BY activation.activationId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY labimo_Activation.activationId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.labimo.model.Activation"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.labimo.model.Activation"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.labimo.model.Activation"));

	public ActivationModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _activationId;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setActivationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _activationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Activation.class;
	}

	@Override
	public String getModelClassName() {
		return Activation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("activationId", getActivationId());
		attributes.put("hardwareUuid", getHardwareUuid());
		attributes.put("licenseUuid", getLicenseUuid());
		attributes.put("createTime", getCreateTime());
		attributes.put("valid", getValid());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String activationId = (String)attributes.get("activationId");

		if (activationId != null) {
			setActivationId(activationId);
		}

		String hardwareUuid = (String)attributes.get("hardwareUuid");

		if (hardwareUuid != null) {
			setHardwareUuid(hardwareUuid);
		}

		String licenseUuid = (String)attributes.get("licenseUuid");

		if (licenseUuid != null) {
			setLicenseUuid(licenseUuid);
		}

		Date createTime = (Date)attributes.get("createTime");

		if (createTime != null) {
			setCreateTime(createTime);
		}

		Boolean valid = (Boolean)attributes.get("valid");

		if (valid != null) {
			setValid(valid);
		}
	}

	@Override
	public String getActivationId() {
		if (_activationId == null) {
			return StringPool.BLANK;
		}
		else {
			return _activationId;
		}
	}

	@Override
	public void setActivationId(String activationId) {
		_activationId = activationId;
	}

	@Override
	public String getHardwareUuid() {
		if (_hardwareUuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _hardwareUuid;
		}
	}

	@Override
	public void setHardwareUuid(String hardwareUuid) {
		_hardwareUuid = hardwareUuid;
	}

	@Override
	public String getLicenseUuid() {
		if (_licenseUuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _licenseUuid;
		}
	}

	@Override
	public void setLicenseUuid(String licenseUuid) {
		_licenseUuid = licenseUuid;
	}

	@Override
	public Date getCreateTime() {
		return _createTime;
	}

	@Override
	public void setCreateTime(Date createTime) {
		_createTime = createTime;
	}

	@Override
	public boolean getValid() {
		return _valid;
	}

	@Override
	public boolean isValid() {
		return _valid;
	}

	@Override
	public void setValid(boolean valid) {
		_valid = valid;
	}

	@Override
	public Activation toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Activation)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ActivationImpl activationImpl = new ActivationImpl();

		activationImpl.setActivationId(getActivationId());
		activationImpl.setHardwareUuid(getHardwareUuid());
		activationImpl.setLicenseUuid(getLicenseUuid());
		activationImpl.setCreateTime(getCreateTime());
		activationImpl.setValid(getValid());

		activationImpl.resetOriginalValues();

		return activationImpl;
	}

	@Override
	public int compareTo(Activation activation) {
		String primaryKey = activation.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Activation)) {
			return false;
		}

		Activation activation = (Activation)obj;

		String primaryKey = activation.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Activation> toCacheModel() {
		ActivationCacheModel activationCacheModel = new ActivationCacheModel();

		activationCacheModel.activationId = getActivationId();

		String activationId = activationCacheModel.activationId;

		if ((activationId != null) && (activationId.length() == 0)) {
			activationCacheModel.activationId = null;
		}

		activationCacheModel.hardwareUuid = getHardwareUuid();

		String hardwareUuid = activationCacheModel.hardwareUuid;

		if ((hardwareUuid != null) && (hardwareUuid.length() == 0)) {
			activationCacheModel.hardwareUuid = null;
		}

		activationCacheModel.licenseUuid = getLicenseUuid();

		String licenseUuid = activationCacheModel.licenseUuid;

		if ((licenseUuid != null) && (licenseUuid.length() == 0)) {
			activationCacheModel.licenseUuid = null;
		}

		Date createTime = getCreateTime();

		if (createTime != null) {
			activationCacheModel.createTime = createTime.getTime();
		}
		else {
			activationCacheModel.createTime = Long.MIN_VALUE;
		}

		activationCacheModel.valid = getValid();

		return activationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{activationId=");
		sb.append(getActivationId());
		sb.append(", hardwareUuid=");
		sb.append(getHardwareUuid());
		sb.append(", licenseUuid=");
		sb.append(getLicenseUuid());
		sb.append(", createTime=");
		sb.append(getCreateTime());
		sb.append(", valid=");
		sb.append(getValid());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.labimo.model.Activation");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>activationId</column-name><column-value><![CDATA[");
		sb.append(getActivationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hardwareUuid</column-name><column-value><![CDATA[");
		sb.append(getHardwareUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>licenseUuid</column-name><column-value><![CDATA[");
		sb.append(getLicenseUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createTime</column-name><column-value><![CDATA[");
		sb.append(getCreateTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>valid</column-name><column-value><![CDATA[");
		sb.append(getValid());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Activation.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Activation.class
		};
	private String _activationId;
	private String _hardwareUuid;
	private String _licenseUuid;
	private Date _createTime;
	private boolean _valid;
	private Activation _escapedModel;
}