/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.labimo.portlet.tincan.model.impl;

import com.labimo.portlet.tincan.model.Oauth2Endpoint;
import com.labimo.portlet.tincan.model.Oauth2EndpointModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Oauth2Endpoint service. Represents a row in the &quot;labimo_Oauth2Endpoint&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.labimo.portlet.tincan.model.Oauth2EndpointModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Oauth2EndpointImpl}.
 * </p>
 *
 * @author wzgong
 * @see Oauth2EndpointImpl
 * @see com.labimo.portlet.tincan.model.Oauth2Endpoint
 * @see com.labimo.portlet.tincan.model.Oauth2EndpointModel
 * @generated
 */
public class Oauth2EndpointModelImpl extends BaseModelImpl<Oauth2Endpoint>
	implements Oauth2EndpointModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a oauth2 endpoint model instance should use the {@link com.labimo.portlet.tincan.model.Oauth2Endpoint} interface instead.
	 */
	public static final String TABLE_NAME = "labimo_Oauth2Endpoint";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "liferayUserId", Types.BIGINT },
			{ "oauthType", Types.VARCHAR },
			{ "isPublic", Types.BOOLEAN },
			{ "guestAccess", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table labimo_Oauth2Endpoint (id_ LONG not null primary key,liferayUserId LONG,oauthType VARCHAR(75) null,isPublic BOOLEAN,guestAccess BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table labimo_Oauth2Endpoint";
	public static final String ORDER_BY_JPQL = " ORDER BY oauth2Endpoint.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY labimo_Oauth2Endpoint.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.labimo.portlet.tincan.model.Oauth2Endpoint"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.labimo.portlet.tincan.model.Oauth2Endpoint"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.labimo.portlet.tincan.model.Oauth2Endpoint"));

	public Oauth2EndpointModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Oauth2Endpoint.class;
	}

	@Override
	public String getModelClassName() {
		return Oauth2Endpoint.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("liferayUserId", getLiferayUserId());
		attributes.put("oauthType", getOauthType());
		attributes.put("isPublic", getIsPublic());
		attributes.put("guestAccess", getGuestAccess());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long liferayUserId = (Long)attributes.get("liferayUserId");

		if (liferayUserId != null) {
			setLiferayUserId(liferayUserId);
		}

		String oauthType = (String)attributes.get("oauthType");

		if (oauthType != null) {
			setOauthType(oauthType);
		}

		Boolean isPublic = (Boolean)attributes.get("isPublic");

		if (isPublic != null) {
			setIsPublic(isPublic);
		}

		Boolean guestAccess = (Boolean)attributes.get("guestAccess");

		if (guestAccess != null) {
			setGuestAccess(guestAccess);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getLiferayUserId() {
		return _liferayUserId;
	}

	@Override
	public void setLiferayUserId(long liferayUserId) {
		_liferayUserId = liferayUserId;
	}

	@Override
	public String getLiferayUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getLiferayUserId(), "uuid",
			_liferayUserUuid);
	}

	@Override
	public void setLiferayUserUuid(String liferayUserUuid) {
		_liferayUserUuid = liferayUserUuid;
	}

	@Override
	public String getOauthType() {
		if (_oauthType == null) {
			return StringPool.BLANK;
		}
		else {
			return _oauthType;
		}
	}

	@Override
	public void setOauthType(String oauthType) {
		_oauthType = oauthType;
	}

	@Override
	public boolean getIsPublic() {
		return _isPublic;
	}

	@Override
	public boolean isIsPublic() {
		return _isPublic;
	}

	@Override
	public void setIsPublic(boolean isPublic) {
		_isPublic = isPublic;
	}

	@Override
	public boolean getGuestAccess() {
		return _guestAccess;
	}

	@Override
	public boolean isGuestAccess() {
		return _guestAccess;
	}

	@Override
	public void setGuestAccess(boolean guestAccess) {
		_guestAccess = guestAccess;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Oauth2Endpoint.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Oauth2Endpoint toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Oauth2Endpoint)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		Oauth2EndpointImpl oauth2EndpointImpl = new Oauth2EndpointImpl();

		oauth2EndpointImpl.setId(getId());
		oauth2EndpointImpl.setLiferayUserId(getLiferayUserId());
		oauth2EndpointImpl.setOauthType(getOauthType());
		oauth2EndpointImpl.setIsPublic(getIsPublic());
		oauth2EndpointImpl.setGuestAccess(getGuestAccess());

		oauth2EndpointImpl.resetOriginalValues();

		return oauth2EndpointImpl;
	}

	@Override
	public int compareTo(Oauth2Endpoint oauth2Endpoint) {
		long primaryKey = oauth2Endpoint.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Oauth2Endpoint)) {
			return false;
		}

		Oauth2Endpoint oauth2Endpoint = (Oauth2Endpoint)obj;

		long primaryKey = oauth2Endpoint.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Oauth2Endpoint> toCacheModel() {
		Oauth2EndpointCacheModel oauth2EndpointCacheModel = new Oauth2EndpointCacheModel();

		oauth2EndpointCacheModel.id = getId();

		oauth2EndpointCacheModel.liferayUserId = getLiferayUserId();

		oauth2EndpointCacheModel.oauthType = getOauthType();

		String oauthType = oauth2EndpointCacheModel.oauthType;

		if ((oauthType != null) && (oauthType.length() == 0)) {
			oauth2EndpointCacheModel.oauthType = null;
		}

		oauth2EndpointCacheModel.isPublic = getIsPublic();

		oauth2EndpointCacheModel.guestAccess = getGuestAccess();

		return oauth2EndpointCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", liferayUserId=");
		sb.append(getLiferayUserId());
		sb.append(", oauthType=");
		sb.append(getOauthType());
		sb.append(", isPublic=");
		sb.append(getIsPublic());
		sb.append(", guestAccess=");
		sb.append(getGuestAccess());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.labimo.portlet.tincan.model.Oauth2Endpoint");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>liferayUserId</column-name><column-value><![CDATA[");
		sb.append(getLiferayUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>oauthType</column-name><column-value><![CDATA[");
		sb.append(getOauthType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isPublic</column-name><column-value><![CDATA[");
		sb.append(getIsPublic());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>guestAccess</column-name><column-value><![CDATA[");
		sb.append(getGuestAccess());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Oauth2Endpoint.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Oauth2Endpoint.class
		};
	private long _id;
	private long _liferayUserId;
	private String _liferayUserUuid;
	private String _oauthType;
	private boolean _isPublic;
	private boolean _guestAccess;
	private Oauth2Endpoint _escapedModel;
}