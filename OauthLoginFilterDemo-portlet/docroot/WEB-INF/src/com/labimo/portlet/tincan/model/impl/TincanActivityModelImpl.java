/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.labimo.portlet.tincan.model.impl;

import com.labimo.portlet.tincan.model.TincanActivity;
import com.labimo.portlet.tincan.model.TincanActivityModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the TincanActivity service. Represents a row in the &quot;labimo_TincanActivity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.labimo.portlet.tincan.model.TincanActivityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TincanActivityImpl}.
 * </p>
 *
 * @author wzgong
 * @see TincanActivityImpl
 * @see com.labimo.portlet.tincan.model.TincanActivity
 * @see com.labimo.portlet.tincan.model.TincanActivityModel
 * @generated
 */
public class TincanActivityModelImpl extends BaseModelImpl<TincanActivity>
	implements TincanActivityModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tincan activity model instance should use the {@link com.labimo.portlet.tincan.model.TincanActivity} interface instead.
	 */
	public static final String TABLE_NAME = "labimo_TincanActivity";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "activityId", Types.VARCHAR },
			{ "objectType", Types.VARCHAR },
			{ "activityDefinitionName", Types.VARCHAR },
			{ "activityDefinitionDescription", Types.VARCHAR },
			{ "activityDefinitionType", Types.VARCHAR },
			{ "activityDefinitionMoreInfo", Types.VARCHAR },
			{ "activityDefinitionInteractionType", Types.VARCHAR },
			{ "activityDefinitionExtensions", Types.VARCHAR },
			{ "activityDefinitionCrpanswers", Types.VARCHAR },
			{ "activityDefinitionChoices", Types.VARCHAR },
			{ "activityDefinitionScales", Types.VARCHAR },
			{ "activityDefinitionSources", Types.VARCHAR },
			{ "activityDefinitionTargets", Types.VARCHAR },
			{ "activityDefinitionSteps", Types.VARCHAR },
			{ "authoritative", Types.VARCHAR },
			{ "canonical_version", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table labimo_TincanActivity (id_ LONG not null primary key,activityId VARCHAR(75) null,objectType VARCHAR(75) null,activityDefinitionName VARCHAR(75) null,activityDefinitionDescription VARCHAR(75) null,activityDefinitionType VARCHAR(75) null,activityDefinitionMoreInfo VARCHAR(75) null,activityDefinitionInteractionType VARCHAR(75) null,activityDefinitionExtensions VARCHAR(75) null,activityDefinitionCrpanswers VARCHAR(75) null,activityDefinitionChoices VARCHAR(75) null,activityDefinitionScales VARCHAR(75) null,activityDefinitionSources VARCHAR(75) null,activityDefinitionTargets VARCHAR(75) null,activityDefinitionSteps VARCHAR(75) null,authoritative VARCHAR(75) null,canonical_version BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table labimo_TincanActivity";
	public static final String ORDER_BY_JPQL = " ORDER BY tincanActivity.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY labimo_TincanActivity.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.labimo.portlet.tincan.model.TincanActivity"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.labimo.portlet.tincan.model.TincanActivity"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.labimo.portlet.tincan.model.TincanActivity"));

	public TincanActivityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TincanActivity.class;
	}

	@Override
	public String getModelClassName() {
		return TincanActivity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("activityId", getActivityId());
		attributes.put("objectType", getObjectType());
		attributes.put("activityDefinitionName", getActivityDefinitionName());
		attributes.put("activityDefinitionDescription",
			getActivityDefinitionDescription());
		attributes.put("activityDefinitionType", getActivityDefinitionType());
		attributes.put("activityDefinitionMoreInfo",
			getActivityDefinitionMoreInfo());
		attributes.put("activityDefinitionInteractionType",
			getActivityDefinitionInteractionType());
		attributes.put("activityDefinitionExtensions",
			getActivityDefinitionExtensions());
		attributes.put("activityDefinitionCrpanswers",
			getActivityDefinitionCrpanswers());
		attributes.put("activityDefinitionChoices",
			getActivityDefinitionChoices());
		attributes.put("activityDefinitionScales", getActivityDefinitionScales());
		attributes.put("activityDefinitionSources",
			getActivityDefinitionSources());
		attributes.put("activityDefinitionTargets",
			getActivityDefinitionTargets());
		attributes.put("activityDefinitionSteps", getActivityDefinitionSteps());
		attributes.put("authoritative", getAuthoritative());
		attributes.put("canonical_version", getCanonical_version());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String activityId = (String)attributes.get("activityId");

		if (activityId != null) {
			setActivityId(activityId);
		}

		String objectType = (String)attributes.get("objectType");

		if (objectType != null) {
			setObjectType(objectType);
		}

		String activityDefinitionName = (String)attributes.get(
				"activityDefinitionName");

		if (activityDefinitionName != null) {
			setActivityDefinitionName(activityDefinitionName);
		}

		String activityDefinitionDescription = (String)attributes.get(
				"activityDefinitionDescription");

		if (activityDefinitionDescription != null) {
			setActivityDefinitionDescription(activityDefinitionDescription);
		}

		String activityDefinitionType = (String)attributes.get(
				"activityDefinitionType");

		if (activityDefinitionType != null) {
			setActivityDefinitionType(activityDefinitionType);
		}

		String activityDefinitionMoreInfo = (String)attributes.get(
				"activityDefinitionMoreInfo");

		if (activityDefinitionMoreInfo != null) {
			setActivityDefinitionMoreInfo(activityDefinitionMoreInfo);
		}

		String activityDefinitionInteractionType = (String)attributes.get(
				"activityDefinitionInteractionType");

		if (activityDefinitionInteractionType != null) {
			setActivityDefinitionInteractionType(activityDefinitionInteractionType);
		}

		String activityDefinitionExtensions = (String)attributes.get(
				"activityDefinitionExtensions");

		if (activityDefinitionExtensions != null) {
			setActivityDefinitionExtensions(activityDefinitionExtensions);
		}

		String activityDefinitionCrpanswers = (String)attributes.get(
				"activityDefinitionCrpanswers");

		if (activityDefinitionCrpanswers != null) {
			setActivityDefinitionCrpanswers(activityDefinitionCrpanswers);
		}

		String activityDefinitionChoices = (String)attributes.get(
				"activityDefinitionChoices");

		if (activityDefinitionChoices != null) {
			setActivityDefinitionChoices(activityDefinitionChoices);
		}

		String activityDefinitionScales = (String)attributes.get(
				"activityDefinitionScales");

		if (activityDefinitionScales != null) {
			setActivityDefinitionScales(activityDefinitionScales);
		}

		String activityDefinitionSources = (String)attributes.get(
				"activityDefinitionSources");

		if (activityDefinitionSources != null) {
			setActivityDefinitionSources(activityDefinitionSources);
		}

		String activityDefinitionTargets = (String)attributes.get(
				"activityDefinitionTargets");

		if (activityDefinitionTargets != null) {
			setActivityDefinitionTargets(activityDefinitionTargets);
		}

		String activityDefinitionSteps = (String)attributes.get(
				"activityDefinitionSteps");

		if (activityDefinitionSteps != null) {
			setActivityDefinitionSteps(activityDefinitionSteps);
		}

		String authoritative = (String)attributes.get("authoritative");

		if (authoritative != null) {
			setAuthoritative(authoritative);
		}

		Boolean canonical_version = (Boolean)attributes.get("canonical_version");

		if (canonical_version != null) {
			setCanonical_version(canonical_version);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public String getActivityId() {
		if (_activityId == null) {
			return StringPool.BLANK;
		}
		else {
			return _activityId;
		}
	}

	@Override
	public void setActivityId(String activityId) {
		_activityId = activityId;
	}

	@Override
	public String getObjectType() {
		if (_objectType == null) {
			return StringPool.BLANK;
		}
		else {
			return _objectType;
		}
	}

	@Override
	public void setObjectType(String objectType) {
		_objectType = objectType;
	}

	@Override
	public String getActivityDefinitionName() {
		if (_activityDefinitionName == null) {
			return StringPool.BLANK;
		}
		else {
			return _activityDefinitionName;
		}
	}

	@Override
	public void setActivityDefinitionName(String activityDefinitionName) {
		_activityDefinitionName = activityDefinitionName;
	}

	@Override
	public String getActivityDefinitionDescription() {
		if (_activityDefinitionDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _activityDefinitionDescription;
		}
	}

	@Override
	public void setActivityDefinitionDescription(
		String activityDefinitionDescription) {
		_activityDefinitionDescription = activityDefinitionDescription;
	}

	@Override
	public String getActivityDefinitionType() {
		if (_activityDefinitionType == null) {
			return StringPool.BLANK;
		}
		else {
			return _activityDefinitionType;
		}
	}

	@Override
	public void setActivityDefinitionType(String activityDefinitionType) {
		_activityDefinitionType = activityDefinitionType;
	}

	@Override
	public String getActivityDefinitionMoreInfo() {
		if (_activityDefinitionMoreInfo == null) {
			return StringPool.BLANK;
		}
		else {
			return _activityDefinitionMoreInfo;
		}
	}

	@Override
	public void setActivityDefinitionMoreInfo(String activityDefinitionMoreInfo) {
		_activityDefinitionMoreInfo = activityDefinitionMoreInfo;
	}

	@Override
	public String getActivityDefinitionInteractionType() {
		if (_activityDefinitionInteractionType == null) {
			return StringPool.BLANK;
		}
		else {
			return _activityDefinitionInteractionType;
		}
	}

	@Override
	public void setActivityDefinitionInteractionType(
		String activityDefinitionInteractionType) {
		_activityDefinitionInteractionType = activityDefinitionInteractionType;
	}

	@Override
	public String getActivityDefinitionExtensions() {
		if (_activityDefinitionExtensions == null) {
			return StringPool.BLANK;
		}
		else {
			return _activityDefinitionExtensions;
		}
	}

	@Override
	public void setActivityDefinitionExtensions(
		String activityDefinitionExtensions) {
		_activityDefinitionExtensions = activityDefinitionExtensions;
	}

	@Override
	public String getActivityDefinitionCrpanswers() {
		if (_activityDefinitionCrpanswers == null) {
			return StringPool.BLANK;
		}
		else {
			return _activityDefinitionCrpanswers;
		}
	}

	@Override
	public void setActivityDefinitionCrpanswers(
		String activityDefinitionCrpanswers) {
		_activityDefinitionCrpanswers = activityDefinitionCrpanswers;
	}

	@Override
	public String getActivityDefinitionChoices() {
		if (_activityDefinitionChoices == null) {
			return StringPool.BLANK;
		}
		else {
			return _activityDefinitionChoices;
		}
	}

	@Override
	public void setActivityDefinitionChoices(String activityDefinitionChoices) {
		_activityDefinitionChoices = activityDefinitionChoices;
	}

	@Override
	public String getActivityDefinitionScales() {
		if (_activityDefinitionScales == null) {
			return StringPool.BLANK;
		}
		else {
			return _activityDefinitionScales;
		}
	}

	@Override
	public void setActivityDefinitionScales(String activityDefinitionScales) {
		_activityDefinitionScales = activityDefinitionScales;
	}

	@Override
	public String getActivityDefinitionSources() {
		if (_activityDefinitionSources == null) {
			return StringPool.BLANK;
		}
		else {
			return _activityDefinitionSources;
		}
	}

	@Override
	public void setActivityDefinitionSources(String activityDefinitionSources) {
		_activityDefinitionSources = activityDefinitionSources;
	}

	@Override
	public String getActivityDefinitionTargets() {
		if (_activityDefinitionTargets == null) {
			return StringPool.BLANK;
		}
		else {
			return _activityDefinitionTargets;
		}
	}

	@Override
	public void setActivityDefinitionTargets(String activityDefinitionTargets) {
		_activityDefinitionTargets = activityDefinitionTargets;
	}

	@Override
	public String getActivityDefinitionSteps() {
		if (_activityDefinitionSteps == null) {
			return StringPool.BLANK;
		}
		else {
			return _activityDefinitionSteps;
		}
	}

	@Override
	public void setActivityDefinitionSteps(String activityDefinitionSteps) {
		_activityDefinitionSteps = activityDefinitionSteps;
	}

	@Override
	public String getAuthoritative() {
		if (_authoritative == null) {
			return StringPool.BLANK;
		}
		else {
			return _authoritative;
		}
	}

	@Override
	public void setAuthoritative(String authoritative) {
		_authoritative = authoritative;
	}

	@Override
	public boolean getCanonical_version() {
		return _canonical_version;
	}

	@Override
	public boolean isCanonical_version() {
		return _canonical_version;
	}

	@Override
	public void setCanonical_version(boolean canonical_version) {
		_canonical_version = canonical_version;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			TincanActivity.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TincanActivity toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TincanActivity)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TincanActivityImpl tincanActivityImpl = new TincanActivityImpl();

		tincanActivityImpl.setId(getId());
		tincanActivityImpl.setActivityId(getActivityId());
		tincanActivityImpl.setObjectType(getObjectType());
		tincanActivityImpl.setActivityDefinitionName(getActivityDefinitionName());
		tincanActivityImpl.setActivityDefinitionDescription(getActivityDefinitionDescription());
		tincanActivityImpl.setActivityDefinitionType(getActivityDefinitionType());
		tincanActivityImpl.setActivityDefinitionMoreInfo(getActivityDefinitionMoreInfo());
		tincanActivityImpl.setActivityDefinitionInteractionType(getActivityDefinitionInteractionType());
		tincanActivityImpl.setActivityDefinitionExtensions(getActivityDefinitionExtensions());
		tincanActivityImpl.setActivityDefinitionCrpanswers(getActivityDefinitionCrpanswers());
		tincanActivityImpl.setActivityDefinitionChoices(getActivityDefinitionChoices());
		tincanActivityImpl.setActivityDefinitionScales(getActivityDefinitionScales());
		tincanActivityImpl.setActivityDefinitionSources(getActivityDefinitionSources());
		tincanActivityImpl.setActivityDefinitionTargets(getActivityDefinitionTargets());
		tincanActivityImpl.setActivityDefinitionSteps(getActivityDefinitionSteps());
		tincanActivityImpl.setAuthoritative(getAuthoritative());
		tincanActivityImpl.setCanonical_version(getCanonical_version());

		tincanActivityImpl.resetOriginalValues();

		return tincanActivityImpl;
	}

	@Override
	public int compareTo(TincanActivity tincanActivity) {
		long primaryKey = tincanActivity.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TincanActivity)) {
			return false;
		}

		TincanActivity tincanActivity = (TincanActivity)obj;

		long primaryKey = tincanActivity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<TincanActivity> toCacheModel() {
		TincanActivityCacheModel tincanActivityCacheModel = new TincanActivityCacheModel();

		tincanActivityCacheModel.id = getId();

		tincanActivityCacheModel.activityId = getActivityId();

		String activityId = tincanActivityCacheModel.activityId;

		if ((activityId != null) && (activityId.length() == 0)) {
			tincanActivityCacheModel.activityId = null;
		}

		tincanActivityCacheModel.objectType = getObjectType();

		String objectType = tincanActivityCacheModel.objectType;

		if ((objectType != null) && (objectType.length() == 0)) {
			tincanActivityCacheModel.objectType = null;
		}

		tincanActivityCacheModel.activityDefinitionName = getActivityDefinitionName();

		String activityDefinitionName = tincanActivityCacheModel.activityDefinitionName;

		if ((activityDefinitionName != null) &&
				(activityDefinitionName.length() == 0)) {
			tincanActivityCacheModel.activityDefinitionName = null;
		}

		tincanActivityCacheModel.activityDefinitionDescription = getActivityDefinitionDescription();

		String activityDefinitionDescription = tincanActivityCacheModel.activityDefinitionDescription;

		if ((activityDefinitionDescription != null) &&
				(activityDefinitionDescription.length() == 0)) {
			tincanActivityCacheModel.activityDefinitionDescription = null;
		}

		tincanActivityCacheModel.activityDefinitionType = getActivityDefinitionType();

		String activityDefinitionType = tincanActivityCacheModel.activityDefinitionType;

		if ((activityDefinitionType != null) &&
				(activityDefinitionType.length() == 0)) {
			tincanActivityCacheModel.activityDefinitionType = null;
		}

		tincanActivityCacheModel.activityDefinitionMoreInfo = getActivityDefinitionMoreInfo();

		String activityDefinitionMoreInfo = tincanActivityCacheModel.activityDefinitionMoreInfo;

		if ((activityDefinitionMoreInfo != null) &&
				(activityDefinitionMoreInfo.length() == 0)) {
			tincanActivityCacheModel.activityDefinitionMoreInfo = null;
		}

		tincanActivityCacheModel.activityDefinitionInteractionType = getActivityDefinitionInteractionType();

		String activityDefinitionInteractionType = tincanActivityCacheModel.activityDefinitionInteractionType;

		if ((activityDefinitionInteractionType != null) &&
				(activityDefinitionInteractionType.length() == 0)) {
			tincanActivityCacheModel.activityDefinitionInteractionType = null;
		}

		tincanActivityCacheModel.activityDefinitionExtensions = getActivityDefinitionExtensions();

		String activityDefinitionExtensions = tincanActivityCacheModel.activityDefinitionExtensions;

		if ((activityDefinitionExtensions != null) &&
				(activityDefinitionExtensions.length() == 0)) {
			tincanActivityCacheModel.activityDefinitionExtensions = null;
		}

		tincanActivityCacheModel.activityDefinitionCrpanswers = getActivityDefinitionCrpanswers();

		String activityDefinitionCrpanswers = tincanActivityCacheModel.activityDefinitionCrpanswers;

		if ((activityDefinitionCrpanswers != null) &&
				(activityDefinitionCrpanswers.length() == 0)) {
			tincanActivityCacheModel.activityDefinitionCrpanswers = null;
		}

		tincanActivityCacheModel.activityDefinitionChoices = getActivityDefinitionChoices();

		String activityDefinitionChoices = tincanActivityCacheModel.activityDefinitionChoices;

		if ((activityDefinitionChoices != null) &&
				(activityDefinitionChoices.length() == 0)) {
			tincanActivityCacheModel.activityDefinitionChoices = null;
		}

		tincanActivityCacheModel.activityDefinitionScales = getActivityDefinitionScales();

		String activityDefinitionScales = tincanActivityCacheModel.activityDefinitionScales;

		if ((activityDefinitionScales != null) &&
				(activityDefinitionScales.length() == 0)) {
			tincanActivityCacheModel.activityDefinitionScales = null;
		}

		tincanActivityCacheModel.activityDefinitionSources = getActivityDefinitionSources();

		String activityDefinitionSources = tincanActivityCacheModel.activityDefinitionSources;

		if ((activityDefinitionSources != null) &&
				(activityDefinitionSources.length() == 0)) {
			tincanActivityCacheModel.activityDefinitionSources = null;
		}

		tincanActivityCacheModel.activityDefinitionTargets = getActivityDefinitionTargets();

		String activityDefinitionTargets = tincanActivityCacheModel.activityDefinitionTargets;

		if ((activityDefinitionTargets != null) &&
				(activityDefinitionTargets.length() == 0)) {
			tincanActivityCacheModel.activityDefinitionTargets = null;
		}

		tincanActivityCacheModel.activityDefinitionSteps = getActivityDefinitionSteps();

		String activityDefinitionSteps = tincanActivityCacheModel.activityDefinitionSteps;

		if ((activityDefinitionSteps != null) &&
				(activityDefinitionSteps.length() == 0)) {
			tincanActivityCacheModel.activityDefinitionSteps = null;
		}

		tincanActivityCacheModel.authoritative = getAuthoritative();

		String authoritative = tincanActivityCacheModel.authoritative;

		if ((authoritative != null) && (authoritative.length() == 0)) {
			tincanActivityCacheModel.authoritative = null;
		}

		tincanActivityCacheModel.canonical_version = getCanonical_version();

		return tincanActivityCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", activityId=");
		sb.append(getActivityId());
		sb.append(", objectType=");
		sb.append(getObjectType());
		sb.append(", activityDefinitionName=");
		sb.append(getActivityDefinitionName());
		sb.append(", activityDefinitionDescription=");
		sb.append(getActivityDefinitionDescription());
		sb.append(", activityDefinitionType=");
		sb.append(getActivityDefinitionType());
		sb.append(", activityDefinitionMoreInfo=");
		sb.append(getActivityDefinitionMoreInfo());
		sb.append(", activityDefinitionInteractionType=");
		sb.append(getActivityDefinitionInteractionType());
		sb.append(", activityDefinitionExtensions=");
		sb.append(getActivityDefinitionExtensions());
		sb.append(", activityDefinitionCrpanswers=");
		sb.append(getActivityDefinitionCrpanswers());
		sb.append(", activityDefinitionChoices=");
		sb.append(getActivityDefinitionChoices());
		sb.append(", activityDefinitionScales=");
		sb.append(getActivityDefinitionScales());
		sb.append(", activityDefinitionSources=");
		sb.append(getActivityDefinitionSources());
		sb.append(", activityDefinitionTargets=");
		sb.append(getActivityDefinitionTargets());
		sb.append(", activityDefinitionSteps=");
		sb.append(getActivityDefinitionSteps());
		sb.append(", authoritative=");
		sb.append(getAuthoritative());
		sb.append(", canonical_version=");
		sb.append(getCanonical_version());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append("com.labimo.portlet.tincan.model.TincanActivity");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activityId</column-name><column-value><![CDATA[");
		sb.append(getActivityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>objectType</column-name><column-value><![CDATA[");
		sb.append(getObjectType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activityDefinitionName</column-name><column-value><![CDATA[");
		sb.append(getActivityDefinitionName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activityDefinitionDescription</column-name><column-value><![CDATA[");
		sb.append(getActivityDefinitionDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activityDefinitionType</column-name><column-value><![CDATA[");
		sb.append(getActivityDefinitionType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activityDefinitionMoreInfo</column-name><column-value><![CDATA[");
		sb.append(getActivityDefinitionMoreInfo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activityDefinitionInteractionType</column-name><column-value><![CDATA[");
		sb.append(getActivityDefinitionInteractionType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activityDefinitionExtensions</column-name><column-value><![CDATA[");
		sb.append(getActivityDefinitionExtensions());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activityDefinitionCrpanswers</column-name><column-value><![CDATA[");
		sb.append(getActivityDefinitionCrpanswers());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activityDefinitionChoices</column-name><column-value><![CDATA[");
		sb.append(getActivityDefinitionChoices());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activityDefinitionScales</column-name><column-value><![CDATA[");
		sb.append(getActivityDefinitionScales());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activityDefinitionSources</column-name><column-value><![CDATA[");
		sb.append(getActivityDefinitionSources());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activityDefinitionTargets</column-name><column-value><![CDATA[");
		sb.append(getActivityDefinitionTargets());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activityDefinitionSteps</column-name><column-value><![CDATA[");
		sb.append(getActivityDefinitionSteps());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>authoritative</column-name><column-value><![CDATA[");
		sb.append(getAuthoritative());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>canonical_version</column-name><column-value><![CDATA[");
		sb.append(getCanonical_version());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TincanActivity.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			TincanActivity.class
		};
	private long _id;
	private String _activityId;
	private String _objectType;
	private String _activityDefinitionName;
	private String _activityDefinitionDescription;
	private String _activityDefinitionType;
	private String _activityDefinitionMoreInfo;
	private String _activityDefinitionInteractionType;
	private String _activityDefinitionExtensions;
	private String _activityDefinitionCrpanswers;
	private String _activityDefinitionChoices;
	private String _activityDefinitionScales;
	private String _activityDefinitionSources;
	private String _activityDefinitionTargets;
	private String _activityDefinitionSteps;
	private String _authoritative;
	private boolean _canonical_version;
	private TincanActivity _escapedModel;
}