/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.labimo.portlet.tincan.model.impl;

import com.labimo.portlet.tincan.model.Oauth2Token;
import com.labimo.portlet.tincan.model.Oauth2TokenModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Oauth2Token service. Represents a row in the &quot;labimo_Oauth2Token&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.labimo.portlet.tincan.model.Oauth2TokenModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Oauth2TokenImpl}.
 * </p>
 *
 * @author wzgong
 * @see Oauth2TokenImpl
 * @see com.labimo.portlet.tincan.model.Oauth2Token
 * @see com.labimo.portlet.tincan.model.Oauth2TokenModel
 * @generated
 */
public class Oauth2TokenModelImpl extends BaseModelImpl<Oauth2Token>
	implements Oauth2TokenModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a oauth2 token model instance should use the {@link com.labimo.portlet.tincan.model.Oauth2Token} interface instead.
	 */
	public static final String TABLE_NAME = "labimo_Oauth2Token";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "code_", Types.VARCHAR },
			{ "token", Types.VARCHAR },
			{ "refreshToken", Types.VARCHAR },
			{ "clientId", Types.VARCHAR },
			{ "expiredIn", Types.BIGINT },
			{ "liferayUserId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table labimo_Oauth2Token (id_ LONG not null primary key,code_ VARCHAR(75) null,token VARCHAR(75) null,refreshToken VARCHAR(75) null,clientId VARCHAR(75) null,expiredIn LONG,liferayUserId LONG)";
	public static final String TABLE_SQL_DROP = "drop table labimo_Oauth2Token";
	public static final String ORDER_BY_JPQL = " ORDER BY oauth2Token.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY labimo_Oauth2Token.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.labimo.portlet.tincan.model.Oauth2Token"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.labimo.portlet.tincan.model.Oauth2Token"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.labimo.portlet.tincan.model.Oauth2Token"));

	public Oauth2TokenModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Oauth2Token.class;
	}

	@Override
	public String getModelClassName() {
		return Oauth2Token.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("code", getCode());
		attributes.put("token", getToken());
		attributes.put("refreshToken", getRefreshToken());
		attributes.put("clientId", getClientId());
		attributes.put("expiredIn", getExpiredIn());
		attributes.put("liferayUserId", getLiferayUserId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String code = (String)attributes.get("code");

		if (code != null) {
			setCode(code);
		}

		String token = (String)attributes.get("token");

		if (token != null) {
			setToken(token);
		}

		String refreshToken = (String)attributes.get("refreshToken");

		if (refreshToken != null) {
			setRefreshToken(refreshToken);
		}

		String clientId = (String)attributes.get("clientId");

		if (clientId != null) {
			setClientId(clientId);
		}

		Long expiredIn = (Long)attributes.get("expiredIn");

		if (expiredIn != null) {
			setExpiredIn(expiredIn);
		}

		Long liferayUserId = (Long)attributes.get("liferayUserId");

		if (liferayUserId != null) {
			setLiferayUserId(liferayUserId);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public String getCode() {
		if (_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		_code = code;
	}

	@Override
	public String getToken() {
		if (_token == null) {
			return StringPool.BLANK;
		}
		else {
			return _token;
		}
	}

	@Override
	public void setToken(String token) {
		_token = token;
	}

	@Override
	public String getRefreshToken() {
		if (_refreshToken == null) {
			return StringPool.BLANK;
		}
		else {
			return _refreshToken;
		}
	}

	@Override
	public void setRefreshToken(String refreshToken) {
		_refreshToken = refreshToken;
	}

	@Override
	public String getClientId() {
		if (_clientId == null) {
			return StringPool.BLANK;
		}
		else {
			return _clientId;
		}
	}

	@Override
	public void setClientId(String clientId) {
		_clientId = clientId;
	}

	@Override
	public long getExpiredIn() {
		return _expiredIn;
	}

	@Override
	public void setExpiredIn(long expiredIn) {
		_expiredIn = expiredIn;
	}

	@Override
	public long getLiferayUserId() {
		return _liferayUserId;
	}

	@Override
	public void setLiferayUserId(long liferayUserId) {
		_liferayUserId = liferayUserId;
	}

	@Override
	public String getLiferayUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getLiferayUserId(), "uuid",
			_liferayUserUuid);
	}

	@Override
	public void setLiferayUserUuid(String liferayUserUuid) {
		_liferayUserUuid = liferayUserUuid;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Oauth2Token.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Oauth2Token toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Oauth2Token)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		Oauth2TokenImpl oauth2TokenImpl = new Oauth2TokenImpl();

		oauth2TokenImpl.setId(getId());
		oauth2TokenImpl.setCode(getCode());
		oauth2TokenImpl.setToken(getToken());
		oauth2TokenImpl.setRefreshToken(getRefreshToken());
		oauth2TokenImpl.setClientId(getClientId());
		oauth2TokenImpl.setExpiredIn(getExpiredIn());
		oauth2TokenImpl.setLiferayUserId(getLiferayUserId());

		oauth2TokenImpl.resetOriginalValues();

		return oauth2TokenImpl;
	}

	@Override
	public int compareTo(Oauth2Token oauth2Token) {
		long primaryKey = oauth2Token.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Oauth2Token)) {
			return false;
		}

		Oauth2Token oauth2Token = (Oauth2Token)obj;

		long primaryKey = oauth2Token.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Oauth2Token> toCacheModel() {
		Oauth2TokenCacheModel oauth2TokenCacheModel = new Oauth2TokenCacheModel();

		oauth2TokenCacheModel.id = getId();

		oauth2TokenCacheModel.code = getCode();

		String code = oauth2TokenCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			oauth2TokenCacheModel.code = null;
		}

		oauth2TokenCacheModel.token = getToken();

		String token = oauth2TokenCacheModel.token;

		if ((token != null) && (token.length() == 0)) {
			oauth2TokenCacheModel.token = null;
		}

		oauth2TokenCacheModel.refreshToken = getRefreshToken();

		String refreshToken = oauth2TokenCacheModel.refreshToken;

		if ((refreshToken != null) && (refreshToken.length() == 0)) {
			oauth2TokenCacheModel.refreshToken = null;
		}

		oauth2TokenCacheModel.clientId = getClientId();

		String clientId = oauth2TokenCacheModel.clientId;

		if ((clientId != null) && (clientId.length() == 0)) {
			oauth2TokenCacheModel.clientId = null;
		}

		oauth2TokenCacheModel.expiredIn = getExpiredIn();

		oauth2TokenCacheModel.liferayUserId = getLiferayUserId();

		return oauth2TokenCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", code=");
		sb.append(getCode());
		sb.append(", token=");
		sb.append(getToken());
		sb.append(", refreshToken=");
		sb.append(getRefreshToken());
		sb.append(", clientId=");
		sb.append(getClientId());
		sb.append(", expiredIn=");
		sb.append(getExpiredIn());
		sb.append(", liferayUserId=");
		sb.append(getLiferayUserId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.labimo.portlet.tincan.model.Oauth2Token");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code</column-name><column-value><![CDATA[");
		sb.append(getCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>token</column-name><column-value><![CDATA[");
		sb.append(getToken());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>refreshToken</column-name><column-value><![CDATA[");
		sb.append(getRefreshToken());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>clientId</column-name><column-value><![CDATA[");
		sb.append(getClientId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expiredIn</column-name><column-value><![CDATA[");
		sb.append(getExpiredIn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>liferayUserId</column-name><column-value><![CDATA[");
		sb.append(getLiferayUserId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Oauth2Token.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Oauth2Token.class
		};
	private long _id;
	private String _code;
	private String _token;
	private String _refreshToken;
	private String _clientId;
	private long _expiredIn;
	private long _liferayUserId;
	private String _liferayUserUuid;
	private Oauth2Token _escapedModel;
}