/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.labimo.portlet.tincan.model.impl;

import com.labimo.portlet.tincan.model.LiferayTincanManifestAct;
import com.labimo.portlet.tincan.model.LiferayTincanManifestActModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LiferayTincanManifestAct service. Represents a row in the &quot;labimo_LiferayTincanManifestAct&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.labimo.portlet.tincan.model.LiferayTincanManifestActModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LiferayTincanManifestActImpl}.
 * </p>
 *
 * @author wzgong
 * @see LiferayTincanManifestActImpl
 * @see com.labimo.portlet.tincan.model.LiferayTincanManifestAct
 * @see com.labimo.portlet.tincan.model.LiferayTincanManifestActModel
 * @generated
 */
public class LiferayTincanManifestActModelImpl extends BaseModelImpl<LiferayTincanManifestAct>
	implements LiferayTincanManifestActModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a liferay tincan manifest act model instance should use the {@link com.labimo.portlet.tincan.model.LiferayTincanManifestAct} interface instead.
	 */
	public static final String TABLE_NAME = "labimo_LiferayTincanManifestAct";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "activityId", Types.VARCHAR },
			{ "name", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "launch", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table labimo_LiferayTincanManifestAct (id_ LONG not null primary key,activityId VARCHAR(75) null,name VARCHAR(75) null,description VARCHAR(75) null,launch VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table labimo_LiferayTincanManifestAct";
	public static final String ORDER_BY_JPQL = " ORDER BY liferayTincanManifestAct.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY labimo_LiferayTincanManifestAct.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.labimo.portlet.tincan.model.LiferayTincanManifestAct"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.labimo.portlet.tincan.model.LiferayTincanManifestAct"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.labimo.portlet.tincan.model.LiferayTincanManifestAct"));

	public LiferayTincanManifestActModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LiferayTincanManifestAct.class;
	}

	@Override
	public String getModelClassName() {
		return LiferayTincanManifestAct.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("activityId", getActivityId());
		attributes.put("name", getName());
		attributes.put("description", getDescription());
		attributes.put("launch", getLaunch());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String activityId = (String)attributes.get("activityId");

		if (activityId != null) {
			setActivityId(activityId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String launch = (String)attributes.get("launch");

		if (launch != null) {
			setLaunch(launch);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public String getActivityId() {
		if (_activityId == null) {
			return StringPool.BLANK;
		}
		else {
			return _activityId;
		}
	}

	@Override
	public void setActivityId(String activityId) {
		_activityId = activityId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public String getLaunch() {
		if (_launch == null) {
			return StringPool.BLANK;
		}
		else {
			return _launch;
		}
	}

	@Override
	public void setLaunch(String launch) {
		_launch = launch;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			LiferayTincanManifestAct.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LiferayTincanManifestAct toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LiferayTincanManifestAct)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LiferayTincanManifestActImpl liferayTincanManifestActImpl = new LiferayTincanManifestActImpl();

		liferayTincanManifestActImpl.setId(getId());
		liferayTincanManifestActImpl.setActivityId(getActivityId());
		liferayTincanManifestActImpl.setName(getName());
		liferayTincanManifestActImpl.setDescription(getDescription());
		liferayTincanManifestActImpl.setLaunch(getLaunch());

		liferayTincanManifestActImpl.resetOriginalValues();

		return liferayTincanManifestActImpl;
	}

	@Override
	public int compareTo(LiferayTincanManifestAct liferayTincanManifestAct) {
		long primaryKey = liferayTincanManifestAct.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LiferayTincanManifestAct)) {
			return false;
		}

		LiferayTincanManifestAct liferayTincanManifestAct = (LiferayTincanManifestAct)obj;

		long primaryKey = liferayTincanManifestAct.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<LiferayTincanManifestAct> toCacheModel() {
		LiferayTincanManifestActCacheModel liferayTincanManifestActCacheModel = new LiferayTincanManifestActCacheModel();

		liferayTincanManifestActCacheModel.id = getId();

		liferayTincanManifestActCacheModel.activityId = getActivityId();

		String activityId = liferayTincanManifestActCacheModel.activityId;

		if ((activityId != null) && (activityId.length() == 0)) {
			liferayTincanManifestActCacheModel.activityId = null;
		}

		liferayTincanManifestActCacheModel.name = getName();

		String name = liferayTincanManifestActCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			liferayTincanManifestActCacheModel.name = null;
		}

		liferayTincanManifestActCacheModel.description = getDescription();

		String description = liferayTincanManifestActCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			liferayTincanManifestActCacheModel.description = null;
		}

		liferayTincanManifestActCacheModel.launch = getLaunch();

		String launch = liferayTincanManifestActCacheModel.launch;

		if ((launch != null) && (launch.length() == 0)) {
			liferayTincanManifestActCacheModel.launch = null;
		}

		return liferayTincanManifestActCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", activityId=");
		sb.append(getActivityId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", launch=");
		sb.append(getLaunch());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.labimo.portlet.tincan.model.LiferayTincanManifestAct");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activityId</column-name><column-value><![CDATA[");
		sb.append(getActivityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>launch</column-name><column-value><![CDATA[");
		sb.append(getLaunch());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LiferayTincanManifestAct.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			LiferayTincanManifestAct.class
		};
	private long _id;
	private String _activityId;
	private String _name;
	private String _description;
	private String _launch;
	private LiferayTincanManifestAct _escapedModel;
}