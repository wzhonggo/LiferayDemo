/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.labimo.portlet.tincan.model.impl;

import com.labimo.portlet.tincan.model.TincanStatementAttachment;
import com.labimo.portlet.tincan.model.TincanStatementAttachmentModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the TincanStatementAttachment service. Represents a row in the &quot;labimo_TincanStatementAttachment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.labimo.portlet.tincan.model.TincanStatementAttachmentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TincanStatementAttachmentImpl}.
 * </p>
 *
 * @author wzgong
 * @see TincanStatementAttachmentImpl
 * @see com.labimo.portlet.tincan.model.TincanStatementAttachment
 * @see com.labimo.portlet.tincan.model.TincanStatementAttachmentModel
 * @generated
 */
public class TincanStatementAttachmentModelImpl extends BaseModelImpl<TincanStatementAttachment>
	implements TincanStatementAttachmentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tincan statement attachment model instance should use the {@link com.labimo.portlet.tincan.model.TincanStatementAttachment} interface instead.
	 */
	public static final String TABLE_NAME = "labimo_TincanStatementAttachment";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "statementId", Types.BIGINT },
			{ "statementAttachmentId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table labimo_TincanStatementAttachment (id_ LONG not null primary key,statementId LONG,statementAttachmentId LONG)";
	public static final String TABLE_SQL_DROP = "drop table labimo_TincanStatementAttachment";
	public static final String ORDER_BY_JPQL = " ORDER BY tincanStatementAttachment.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY labimo_TincanStatementAttachment.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.labimo.portlet.tincan.model.TincanStatementAttachment"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.labimo.portlet.tincan.model.TincanStatementAttachment"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.labimo.portlet.tincan.model.TincanStatementAttachment"));

	public TincanStatementAttachmentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TincanStatementAttachment.class;
	}

	@Override
	public String getModelClassName() {
		return TincanStatementAttachment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("statementId", getStatementId());
		attributes.put("statementAttachmentId", getStatementAttachmentId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long statementId = (Long)attributes.get("statementId");

		if (statementId != null) {
			setStatementId(statementId);
		}

		Long statementAttachmentId = (Long)attributes.get(
				"statementAttachmentId");

		if (statementAttachmentId != null) {
			setStatementAttachmentId(statementAttachmentId);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getStatementId() {
		return _statementId;
	}

	@Override
	public void setStatementId(long statementId) {
		_statementId = statementId;
	}

	@Override
	public long getStatementAttachmentId() {
		return _statementAttachmentId;
	}

	@Override
	public void setStatementAttachmentId(long statementAttachmentId) {
		_statementAttachmentId = statementAttachmentId;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			TincanStatementAttachment.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TincanStatementAttachment toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TincanStatementAttachment)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TincanStatementAttachmentImpl tincanStatementAttachmentImpl = new TincanStatementAttachmentImpl();

		tincanStatementAttachmentImpl.setId(getId());
		tincanStatementAttachmentImpl.setStatementId(getStatementId());
		tincanStatementAttachmentImpl.setStatementAttachmentId(getStatementAttachmentId());

		tincanStatementAttachmentImpl.resetOriginalValues();

		return tincanStatementAttachmentImpl;
	}

	@Override
	public int compareTo(TincanStatementAttachment tincanStatementAttachment) {
		long primaryKey = tincanStatementAttachment.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TincanStatementAttachment)) {
			return false;
		}

		TincanStatementAttachment tincanStatementAttachment = (TincanStatementAttachment)obj;

		long primaryKey = tincanStatementAttachment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<TincanStatementAttachment> toCacheModel() {
		TincanStatementAttachmentCacheModel tincanStatementAttachmentCacheModel = new TincanStatementAttachmentCacheModel();

		tincanStatementAttachmentCacheModel.id = getId();

		tincanStatementAttachmentCacheModel.statementId = getStatementId();

		tincanStatementAttachmentCacheModel.statementAttachmentId = getStatementAttachmentId();

		return tincanStatementAttachmentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", statementId=");
		sb.append(getStatementId());
		sb.append(", statementAttachmentId=");
		sb.append(getStatementAttachmentId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.labimo.portlet.tincan.model.TincanStatementAttachment");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statementId</column-name><column-value><![CDATA[");
		sb.append(getStatementId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statementAttachmentId</column-name><column-value><![CDATA[");
		sb.append(getStatementAttachmentId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TincanStatementAttachment.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			TincanStatementAttachment.class
		};
	private long _id;
	private long _statementId;
	private long _statementAttachmentId;
	private TincanStatementAttachment _escapedModel;
}