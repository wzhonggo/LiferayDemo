/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.labimo.portlet.tincan.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

/**
 * The base model interface for the Oauth2Endpoint service. Represents a row in the &quot;labimo_Oauth2Endpoint&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.labimo.portlet.tincan.model.impl.Oauth2EndpointModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.labimo.portlet.tincan.model.impl.Oauth2EndpointImpl}.
 * </p>
 *
 * @author wzgong
 * @see Oauth2Endpoint
 * @see com.labimo.portlet.tincan.model.impl.Oauth2EndpointImpl
 * @see com.labimo.portlet.tincan.model.impl.Oauth2EndpointModelImpl
 * @generated
 */
public interface Oauth2EndpointModel extends BaseModel<Oauth2Endpoint> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a oauth2 endpoint model instance should use the {@link Oauth2Endpoint} interface instead.
	 */

	/**
	 * Returns the primary key of this oauth2 endpoint.
	 *
	 * @return the primary key of this oauth2 endpoint
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this oauth2 endpoint.
	 *
	 * @param primaryKey the primary key of this oauth2 endpoint
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the ID of this oauth2 endpoint.
	 *
	 * @return the ID of this oauth2 endpoint
	 */
	public long getId();

	/**
	 * Sets the ID of this oauth2 endpoint.
	 *
	 * @param id the ID of this oauth2 endpoint
	 */
	public void setId(long id);

	/**
	 * Returns the liferay user ID of this oauth2 endpoint.
	 *
	 * @return the liferay user ID of this oauth2 endpoint
	 */
	public long getLiferayUserId();

	/**
	 * Sets the liferay user ID of this oauth2 endpoint.
	 *
	 * @param liferayUserId the liferay user ID of this oauth2 endpoint
	 */
	public void setLiferayUserId(long liferayUserId);

	/**
	 * Returns the liferay user uuid of this oauth2 endpoint.
	 *
	 * @return the liferay user uuid of this oauth2 endpoint
	 * @throws SystemException if a system exception occurred
	 */
	public String getLiferayUserUuid() throws SystemException;

	/**
	 * Sets the liferay user uuid of this oauth2 endpoint.
	 *
	 * @param liferayUserUuid the liferay user uuid of this oauth2 endpoint
	 */
	public void setLiferayUserUuid(String liferayUserUuid);

	/**
	 * Returns the oauth type of this oauth2 endpoint.
	 *
	 * @return the oauth type of this oauth2 endpoint
	 */
	@AutoEscape
	public String getOauthType();

	/**
	 * Sets the oauth type of this oauth2 endpoint.
	 *
	 * @param oauthType the oauth type of this oauth2 endpoint
	 */
	public void setOauthType(String oauthType);

	/**
	 * Returns the is public of this oauth2 endpoint.
	 *
	 * @return the is public of this oauth2 endpoint
	 */
	public boolean getIsPublic();

	/**
	 * Returns <code>true</code> if this oauth2 endpoint is is public.
	 *
	 * @return <code>true</code> if this oauth2 endpoint is is public; <code>false</code> otherwise
	 */
	public boolean isIsPublic();

	/**
	 * Sets whether this oauth2 endpoint is is public.
	 *
	 * @param isPublic the is public of this oauth2 endpoint
	 */
	public void setIsPublic(boolean isPublic);

	/**
	 * Returns the guest access of this oauth2 endpoint.
	 *
	 * @return the guest access of this oauth2 endpoint
	 */
	public boolean getGuestAccess();

	/**
	 * Returns <code>true</code> if this oauth2 endpoint is guest access.
	 *
	 * @return <code>true</code> if this oauth2 endpoint is guest access; <code>false</code> otherwise
	 */
	public boolean isGuestAccess();

	/**
	 * Sets whether this oauth2 endpoint is guest access.
	 *
	 * @param guestAccess the guest access of this oauth2 endpoint
	 */
	public void setGuestAccess(boolean guestAccess);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(Oauth2Endpoint oauth2Endpoint);

	@Override
	public int hashCode();

	@Override
	public CacheModel<Oauth2Endpoint> toCacheModel();

	@Override
	public Oauth2Endpoint toEscapedModel();

	@Override
	public Oauth2Endpoint toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}