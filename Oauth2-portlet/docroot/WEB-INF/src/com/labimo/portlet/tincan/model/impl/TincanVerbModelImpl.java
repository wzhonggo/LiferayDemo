/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.labimo.portlet.tincan.model.impl;

import com.labimo.portlet.tincan.model.TincanVerb;
import com.labimo.portlet.tincan.model.TincanVerbModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the TincanVerb service. Represents a row in the &quot;labimo_TincanVerb&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.labimo.portlet.tincan.model.TincanVerbModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TincanVerbImpl}.
 * </p>
 *
 * @author wzgong
 * @see TincanVerbImpl
 * @see com.labimo.portlet.tincan.model.TincanVerb
 * @see com.labimo.portlet.tincan.model.TincanVerbModel
 * @generated
 */
public class TincanVerbModelImpl extends BaseModelImpl<TincanVerb>
	implements TincanVerbModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tincan verb model instance should use the {@link com.labimo.portlet.tincan.model.TincanVerb} interface instead.
	 */
	public static final String TABLE_NAME = "labimo_TincanVerb";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "verbId", Types.VARCHAR },
			{ "display", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table labimo_TincanVerb (id_ LONG not null primary key,verbId VARCHAR(75) null,display VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table labimo_TincanVerb";
	public static final String ORDER_BY_JPQL = " ORDER BY tincanVerb.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY labimo_TincanVerb.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.labimo.portlet.tincan.model.TincanVerb"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.labimo.portlet.tincan.model.TincanVerb"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.labimo.portlet.tincan.model.TincanVerb"));

	public TincanVerbModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TincanVerb.class;
	}

	@Override
	public String getModelClassName() {
		return TincanVerb.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("verbId", getVerbId());
		attributes.put("display", getDisplay());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String verbId = (String)attributes.get("verbId");

		if (verbId != null) {
			setVerbId(verbId);
		}

		String display = (String)attributes.get("display");

		if (display != null) {
			setDisplay(display);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public String getVerbId() {
		if (_verbId == null) {
			return StringPool.BLANK;
		}
		else {
			return _verbId;
		}
	}

	@Override
	public void setVerbId(String verbId) {
		_verbId = verbId;
	}

	@Override
	public String getDisplay() {
		if (_display == null) {
			return StringPool.BLANK;
		}
		else {
			return _display;
		}
	}

	@Override
	public void setDisplay(String display) {
		_display = display;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			TincanVerb.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TincanVerb toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TincanVerb)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TincanVerbImpl tincanVerbImpl = new TincanVerbImpl();

		tincanVerbImpl.setId(getId());
		tincanVerbImpl.setVerbId(getVerbId());
		tincanVerbImpl.setDisplay(getDisplay());

		tincanVerbImpl.resetOriginalValues();

		return tincanVerbImpl;
	}

	@Override
	public int compareTo(TincanVerb tincanVerb) {
		long primaryKey = tincanVerb.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TincanVerb)) {
			return false;
		}

		TincanVerb tincanVerb = (TincanVerb)obj;

		long primaryKey = tincanVerb.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<TincanVerb> toCacheModel() {
		TincanVerbCacheModel tincanVerbCacheModel = new TincanVerbCacheModel();

		tincanVerbCacheModel.id = getId();

		tincanVerbCacheModel.verbId = getVerbId();

		String verbId = tincanVerbCacheModel.verbId;

		if ((verbId != null) && (verbId.length() == 0)) {
			tincanVerbCacheModel.verbId = null;
		}

		tincanVerbCacheModel.display = getDisplay();

		String display = tincanVerbCacheModel.display;

		if ((display != null) && (display.length() == 0)) {
			tincanVerbCacheModel.display = null;
		}

		return tincanVerbCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", verbId=");
		sb.append(getVerbId());
		sb.append(", display=");
		sb.append(getDisplay());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.labimo.portlet.tincan.model.TincanVerb");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>verbId</column-name><column-value><![CDATA[");
		sb.append(getVerbId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>display</column-name><column-value><![CDATA[");
		sb.append(getDisplay());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TincanVerb.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			TincanVerb.class
		};
	private long _id;
	private String _verbId;
	private String _display;
	private TincanVerb _escapedModel;
}