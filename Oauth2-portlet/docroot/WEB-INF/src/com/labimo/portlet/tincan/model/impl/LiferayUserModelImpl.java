/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.labimo.portlet.tincan.model.impl;

import com.labimo.portlet.tincan.model.LiferayUser;
import com.labimo.portlet.tincan.model.LiferayUserModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LiferayUser service. Represents a row in the &quot;labimo_LiferayUser&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.labimo.portlet.tincan.model.LiferayUserModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LiferayUserImpl}.
 * </p>
 *
 * @author wzgong
 * @see LiferayUserImpl
 * @see com.labimo.portlet.tincan.model.LiferayUser
 * @see com.labimo.portlet.tincan.model.LiferayUserModel
 * @generated
 */
public class LiferayUserModelImpl extends BaseModelImpl<LiferayUser>
	implements LiferayUserModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a liferay user model instance should use the {@link com.labimo.portlet.tincan.model.LiferayUser} interface instead.
	 */
	public static final String TABLE_NAME = "labimo_LiferayUser";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "liferayUserId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "preferredAudioLevel", Types.DOUBLE },
			{ "preferredLanguage", Types.VARCHAR },
			{ "preferredDeliverySpeed", Types.DOUBLE },
			{ "preferredAudioCaptioning", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table labimo_LiferayUser (id_ LONG not null primary key IDENTITY,liferayUserId LONG,name VARCHAR(75) null,preferredAudioLevel DOUBLE,preferredLanguage VARCHAR(75) null,preferredDeliverySpeed DOUBLE,preferredAudioCaptioning LONG)";
	public static final String TABLE_SQL_DROP = "drop table labimo_LiferayUser";
	public static final String ORDER_BY_JPQL = " ORDER BY liferayUser.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY labimo_LiferayUser.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.labimo.portlet.tincan.model.LiferayUser"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.labimo.portlet.tincan.model.LiferayUser"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.labimo.portlet.tincan.model.LiferayUser"));

	public LiferayUserModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LiferayUser.class;
	}

	@Override
	public String getModelClassName() {
		return LiferayUser.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("liferayUserId", getLiferayUserId());
		attributes.put("name", getName());
		attributes.put("preferredAudioLevel", getPreferredAudioLevel());
		attributes.put("preferredLanguage", getPreferredLanguage());
		attributes.put("preferredDeliverySpeed", getPreferredDeliverySpeed());
		attributes.put("preferredAudioCaptioning", getPreferredAudioCaptioning());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long liferayUserId = (Long)attributes.get("liferayUserId");

		if (liferayUserId != null) {
			setLiferayUserId(liferayUserId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Double preferredAudioLevel = (Double)attributes.get(
				"preferredAudioLevel");

		if (preferredAudioLevel != null) {
			setPreferredAudioLevel(preferredAudioLevel);
		}

		String preferredLanguage = (String)attributes.get("preferredLanguage");

		if (preferredLanguage != null) {
			setPreferredLanguage(preferredLanguage);
		}

		Double preferredDeliverySpeed = (Double)attributes.get(
				"preferredDeliverySpeed");

		if (preferredDeliverySpeed != null) {
			setPreferredDeliverySpeed(preferredDeliverySpeed);
		}

		Long preferredAudioCaptioning = (Long)attributes.get(
				"preferredAudioCaptioning");

		if (preferredAudioCaptioning != null) {
			setPreferredAudioCaptioning(preferredAudioCaptioning);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getLiferayUserId() {
		return _liferayUserId;
	}

	@Override
	public void setLiferayUserId(long liferayUserId) {
		_liferayUserId = liferayUserId;
	}

	@Override
	public String getLiferayUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getLiferayUserId(), "uuid",
			_liferayUserUuid);
	}

	@Override
	public void setLiferayUserUuid(String liferayUserUuid) {
		_liferayUserUuid = liferayUserUuid;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public double getPreferredAudioLevel() {
		return _preferredAudioLevel;
	}

	@Override
	public void setPreferredAudioLevel(double preferredAudioLevel) {
		_preferredAudioLevel = preferredAudioLevel;
	}

	@Override
	public String getPreferredLanguage() {
		if (_preferredLanguage == null) {
			return StringPool.BLANK;
		}
		else {
			return _preferredLanguage;
		}
	}

	@Override
	public void setPreferredLanguage(String preferredLanguage) {
		_preferredLanguage = preferredLanguage;
	}

	@Override
	public double getPreferredDeliverySpeed() {
		return _preferredDeliverySpeed;
	}

	@Override
	public void setPreferredDeliverySpeed(double preferredDeliverySpeed) {
		_preferredDeliverySpeed = preferredDeliverySpeed;
	}

	@Override
	public long getPreferredAudioCaptioning() {
		return _preferredAudioCaptioning;
	}

	@Override
	public void setPreferredAudioCaptioning(long preferredAudioCaptioning) {
		_preferredAudioCaptioning = preferredAudioCaptioning;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			LiferayUser.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LiferayUser toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LiferayUser)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LiferayUserImpl liferayUserImpl = new LiferayUserImpl();

		liferayUserImpl.setId(getId());
		liferayUserImpl.setLiferayUserId(getLiferayUserId());
		liferayUserImpl.setName(getName());
		liferayUserImpl.setPreferredAudioLevel(getPreferredAudioLevel());
		liferayUserImpl.setPreferredLanguage(getPreferredLanguage());
		liferayUserImpl.setPreferredDeliverySpeed(getPreferredDeliverySpeed());
		liferayUserImpl.setPreferredAudioCaptioning(getPreferredAudioCaptioning());

		liferayUserImpl.resetOriginalValues();

		return liferayUserImpl;
	}

	@Override
	public int compareTo(LiferayUser liferayUser) {
		long primaryKey = liferayUser.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LiferayUser)) {
			return false;
		}

		LiferayUser liferayUser = (LiferayUser)obj;

		long primaryKey = liferayUser.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<LiferayUser> toCacheModel() {
		LiferayUserCacheModel liferayUserCacheModel = new LiferayUserCacheModel();

		liferayUserCacheModel.id = getId();

		liferayUserCacheModel.liferayUserId = getLiferayUserId();

		liferayUserCacheModel.name = getName();

		String name = liferayUserCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			liferayUserCacheModel.name = null;
		}

		liferayUserCacheModel.preferredAudioLevel = getPreferredAudioLevel();

		liferayUserCacheModel.preferredLanguage = getPreferredLanguage();

		String preferredLanguage = liferayUserCacheModel.preferredLanguage;

		if ((preferredLanguage != null) && (preferredLanguage.length() == 0)) {
			liferayUserCacheModel.preferredLanguage = null;
		}

		liferayUserCacheModel.preferredDeliverySpeed = getPreferredDeliverySpeed();

		liferayUserCacheModel.preferredAudioCaptioning = getPreferredAudioCaptioning();

		return liferayUserCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", liferayUserId=");
		sb.append(getLiferayUserId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", preferredAudioLevel=");
		sb.append(getPreferredAudioLevel());
		sb.append(", preferredLanguage=");
		sb.append(getPreferredLanguage());
		sb.append(", preferredDeliverySpeed=");
		sb.append(getPreferredDeliverySpeed());
		sb.append(", preferredAudioCaptioning=");
		sb.append(getPreferredAudioCaptioning());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.labimo.portlet.tincan.model.LiferayUser");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>liferayUserId</column-name><column-value><![CDATA[");
		sb.append(getLiferayUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>preferredAudioLevel</column-name><column-value><![CDATA[");
		sb.append(getPreferredAudioLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>preferredLanguage</column-name><column-value><![CDATA[");
		sb.append(getPreferredLanguage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>preferredDeliverySpeed</column-name><column-value><![CDATA[");
		sb.append(getPreferredDeliverySpeed());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>preferredAudioCaptioning</column-name><column-value><![CDATA[");
		sb.append(getPreferredAudioCaptioning());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LiferayUser.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			LiferayUser.class
		};
	private long _id;
	private long _liferayUserId;
	private String _liferayUserUuid;
	private String _name;
	private double _preferredAudioLevel;
	private String _preferredLanguage;
	private double _preferredDeliverySpeed;
	private long _preferredAudioCaptioning;
	private LiferayUser _escapedModel;
}