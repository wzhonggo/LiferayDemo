/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.labimo.model.impl;

import com.labimo.model.License;
import com.labimo.model.LicenseModel;
import com.labimo.model.LicenseSoap;

import com.labimo.service.persistence.LicensePK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the License service. Represents a row in the &quot;license_License&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.labimo.model.LicenseModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LicenseImpl}.
 * </p>
 *
 * @author wzgong
 * @see LicenseImpl
 * @see com.labimo.model.License
 * @see com.labimo.model.LicenseModel
 * @generated
 */
@JSON(strict = true)
public class LicenseModelImpl extends BaseModelImpl<License>
	implements LicenseModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a license model instance should use the {@link com.labimo.model.License} interface instead.
	 */
	public static final String TABLE_NAME = "license_License";
	public static final Object[][] TABLE_COLUMNS = {
			{ "licenseUuid", Types.VARCHAR },
			{ "hardwareUuid", Types.VARCHAR },
			{ "userId", Types.BIGINT },
			{ "content", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table license_License (licenseUuid VARCHAR(75) not null,hardwareUuid VARCHAR(75) not null,userId LONG,content TEXT null,createDate DATE null,modifiedDate DATE null,primary key (licenseUuid, hardwareUuid))";
	public static final String TABLE_SQL_DROP = "drop table license_License";
	public static final String ORDER_BY_JPQL = " ORDER BY license.id.licenseUuid ASC, license.id.hardwareUuid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY license_License.licenseUuid ASC, license_License.hardwareUuid ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.labimo.model.License"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.labimo.model.License"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static License toModel(LicenseSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		License model = new LicenseImpl();

		model.setLicenseUuid(soapModel.getLicenseUuid());
		model.setHardwareUuid(soapModel.getHardwareUuid());
		model.setUserId(soapModel.getUserId());
		model.setContent(soapModel.getContent());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<License> toModels(LicenseSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<License> models = new ArrayList<License>(soapModels.length);

		for (LicenseSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.labimo.model.License"));

	public LicenseModelImpl() {
	}

	@Override
	public LicensePK getPrimaryKey() {
		return new LicensePK(_licenseUuid, _hardwareUuid);
	}

	@Override
	public void setPrimaryKey(LicensePK primaryKey) {
		setLicenseUuid(primaryKey.licenseUuid);
		setHardwareUuid(primaryKey.hardwareUuid);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new LicensePK(_licenseUuid, _hardwareUuid);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((LicensePK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return License.class;
	}

	@Override
	public String getModelClassName() {
		return License.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("licenseUuid", getLicenseUuid());
		attributes.put("hardwareUuid", getHardwareUuid());
		attributes.put("userId", getUserId());
		attributes.put("content", getContent());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String licenseUuid = (String)attributes.get("licenseUuid");

		if (licenseUuid != null) {
			setLicenseUuid(licenseUuid);
		}

		String hardwareUuid = (String)attributes.get("hardwareUuid");

		if (hardwareUuid != null) {
			setHardwareUuid(hardwareUuid);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String content = (String)attributes.get("content");

		if (content != null) {
			setContent(content);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	@Override
	public String getLicenseUuid() {
		if (_licenseUuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _licenseUuid;
		}
	}

	@Override
	public void setLicenseUuid(String licenseUuid) {
		_licenseUuid = licenseUuid;
	}

	@JSON
	@Override
	public String getHardwareUuid() {
		if (_hardwareUuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _hardwareUuid;
		}
	}

	@Override
	public void setHardwareUuid(String hardwareUuid) {
		_hardwareUuid = hardwareUuid;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getContent() {
		if (_content == null) {
			return StringPool.BLANK;
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public License toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (License)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LicenseImpl licenseImpl = new LicenseImpl();

		licenseImpl.setLicenseUuid(getLicenseUuid());
		licenseImpl.setHardwareUuid(getHardwareUuid());
		licenseImpl.setUserId(getUserId());
		licenseImpl.setContent(getContent());
		licenseImpl.setCreateDate(getCreateDate());
		licenseImpl.setModifiedDate(getModifiedDate());

		licenseImpl.resetOriginalValues();

		return licenseImpl;
	}

	@Override
	public int compareTo(License license) {
		LicensePK primaryKey = license.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof License)) {
			return false;
		}

		License license = (License)obj;

		LicensePK primaryKey = license.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<License> toCacheModel() {
		LicenseCacheModel licenseCacheModel = new LicenseCacheModel();

		licenseCacheModel.licenseUuid = getLicenseUuid();

		String licenseUuid = licenseCacheModel.licenseUuid;

		if ((licenseUuid != null) && (licenseUuid.length() == 0)) {
			licenseCacheModel.licenseUuid = null;
		}

		licenseCacheModel.hardwareUuid = getHardwareUuid();

		String hardwareUuid = licenseCacheModel.hardwareUuid;

		if ((hardwareUuid != null) && (hardwareUuid.length() == 0)) {
			licenseCacheModel.hardwareUuid = null;
		}

		licenseCacheModel.userId = getUserId();

		licenseCacheModel.content = getContent();

		String content = licenseCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			licenseCacheModel.content = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			licenseCacheModel.createDate = createDate.getTime();
		}
		else {
			licenseCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			licenseCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			licenseCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return licenseCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{licenseUuid=");
		sb.append(getLicenseUuid());
		sb.append(", hardwareUuid=");
		sb.append(getHardwareUuid());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", content=");
		sb.append(getContent());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.labimo.model.License");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>licenseUuid</column-name><column-value><![CDATA[");
		sb.append(getLicenseUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hardwareUuid</column-name><column-value><![CDATA[");
		sb.append(getHardwareUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content</column-name><column-value><![CDATA[");
		sb.append(getContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = License.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			License.class
		};
	private String _licenseUuid;
	private String _hardwareUuid;
	private long _userId;
	private String _userUuid;
	private String _content;
	private Date _createDate;
	private Date _modifiedDate;
	private License _escapedModel;
}